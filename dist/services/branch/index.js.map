{"version":3,"sources":["../../../src/services/branch/index.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport { BadRequestException, ConflictException } from '../../exceptions';\nimport { IBranch } from '../../interfaces';\nimport { isEmpty } from '../../utils/utils';\nimport db from '../../databases/models';\n\nexport class BranchService {\n  private branch = db.models.branches;\n\n  public async createBranch(branchData: any): Promise<IBranch> {\n    const {\n      buildingNo, street, landmark,\n    } = branchData;\n    if (isEmpty(branchData)) throw new BadRequestException('branch is empty');\n\n    const result: any = await this.branch.findOne({\n      where: {\n        buildingNo, street, landmark,\n      },\n    });\n    if (result) throw new ConflictException('This branch already exists');\n\n    const createBranch: any = await this.branch.create({\n      ...branchData,\n    });\n\n    return createBranch;\n  }\n\n  public async findAllBranches(): Promise<IBranch[]> {\n    const branches: any = await this.branch.findAll();\n    return branches;\n  }\n\n  public async findBranchById(\n    branchId: string,\n  ): Promise<IBranch> {\n    if (isEmpty(branchId)) throw new BadRequestException('Department ID is empty');\n\n    const result: any = await this.branch.findOne({\n      where: { id: branchId },\n    });\n    if (!result) throw new ConflictException(\"Department doesn't exist\");\n\n    return result;\n  }\n\n  public async updateBranch(\n    branchId: string,\n    branchData: IBranch,\n  ): Promise<[affectedCount: number, affectedRows: any[]]> {\n    const {\n      buildingNo, street, landmark, city, state, country, zipCode,\n    } = branchData;\n    if (isEmpty(branchData)) throw new BadRequestException('branchData is empty');\n\n    // if (branchData) {\n    //   const result = await this.branch.findOne({\n    //     where: {\n    //       building_no, street, landmark,\n    //     },\n    //   });\n    //   if (result) throw new ConflictException('This branch already exists');\n    // }\n    const updateBranchById: [\n      affectedCount: number,\n      affectedRows: any[],\n    ] = await this.branch.update(\n      {\n        buildingNo, street, landmark, city, state, country, zipCode,\n      },\n      { where: { id: branchId }, returning: true },\n    );\n    if (!updateBranchById) throw new ConflictException(\"Branch doesn't exist\");\n\n    return updateBranchById;\n  }\n\n  public async deleteBranch(branchId: string): Promise<number> {\n    const result = await this.branch.destroy({\n      where: { id: branchId },\n    });\n    if (!result) throw new ConflictException(\"Branch doesn't exist\");\n    return result;\n  }\n}\n"],"names":["BranchService","createBranch","branchData","buildingNo","street","landmark","isEmpty","BadRequestException","result","branch","findOne","where","ConflictException","create","findAllBranches","branches","findAll","findBranchById","branchId","id","updateBranch","city","state","country","zipCode","updateBranchById","update","returning","deleteBranch","destroy","db","models"],"mappings":"AACA;;;;+BAKaA;;aAAAA;;4BAL0C;uBAE/B;+CACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAER,IAAA,AAAMA,gBAAN,MAAMA;IAGEC,aAAaC,UAAe;;eAAzC,kBAAA,YAA6D;YAC3D,MAAM,EACJC,WAAU,EAAEC,OAAM,EAAEC,SAAQ,EAC7B,GAAGH;YACJ,IAAII,IAAAA,cAAO,EAACJ,aAAa,MAAM,IAAIK,+BAAmB,CAAC,mBAAmB;YAE1E,MAAMC,SAAc,MAAM,MAAKC,MAAM,CAACC,OAAO,CAAC;gBAC5CC,OAAO;oBACLR;oBAAYC;oBAAQC;gBACtB;YACF;YACA,IAAIG,QAAQ,MAAM,IAAII,6BAAiB,CAAC,8BAA8B;YAEtE,MAAMX,eAAoB,MAAM,MAAKQ,MAAM,CAACI,MAAM,CAAC,kBAC9CX;YAGL,OAAOD;QACT;;IAEaa;;eAAb,kBAAA,YAAmD;YACjD,MAAMC,WAAgB,MAAM,MAAKN,MAAM,CAACO,OAAO;YAC/C,OAAOD;QACT;;IAEaE,eACXC,QAAgB;;eADlB,kBAAA,YAEoB;YAClB,IAAIZ,IAAAA,cAAO,EAACY,WAAW,MAAM,IAAIX,+BAAmB,CAAC,0BAA0B;YAE/E,MAAMC,SAAc,MAAM,MAAKC,MAAM,CAACC,OAAO,CAAC;gBAC5CC,OAAO;oBAAEQ,IAAID;gBAAS;YACxB;YACA,IAAI,CAACV,QAAQ,MAAM,IAAII,6BAAiB,CAAC,4BAA4B;YAErE,OAAOJ;QACT;;IAEaY,aACXF,QAAgB,EAChBhB,UAAmB;;eAFrB,kBAAA,YAGyD;YACvD,MAAM,EACJC,WAAU,EAAEC,OAAM,EAAEC,SAAQ,EAAEgB,KAAI,EAAEC,MAAK,EAAEC,QAAO,EAAEC,QAAO,EAC5D,GAAGtB;YACJ,IAAII,IAAAA,cAAO,EAACJ,aAAa,MAAM,IAAIK,+BAAmB,CAAC,uBAAuB;YAU9E,MAAMkB,mBAGF,MAAM,MAAKhB,MAAM,CAACiB,MAAM,CAC1B;gBACEvB;gBAAYC;gBAAQC;gBAAUgB;gBAAMC;gBAAOC;gBAASC;YACtD,GACA;gBAAEb,OAAO;oBAAEQ,IAAID;gBAAS;gBAAGS,WAAW,IAAI;YAAC;YAE7C,IAAI,CAACF,kBAAkB,MAAM,IAAIb,6BAAiB,CAAC,wBAAwB;YAE3E,OAAOa;QACT;;IAEaG,aAAaV,QAAgB;;eAA1C,kBAAA,YAA6D;YAC3D,MAAMV,SAAS,MAAM,MAAKC,MAAM,CAACoB,OAAO,CAAC;gBACvClB,OAAO;oBAAEQ,IAAID;gBAAS;YACxB;YACA,IAAI,CAACV,QAAQ,MAAM,IAAII,6BAAiB,CAAC,wBAAwB;YACjE,OAAOJ;QACT;;;aA7EQC,SAASqB,eAAE,CAACC,MAAM,CAAChB,QAAQ;;AA8ErC"}