{"version":3,"sources":["../../../src/databases/models/index.ts"],"sourcesContent":["import { DataTypes, Sequelize } from 'sequelize';\nimport { config } from '../../config';\n\nconst dbConfig = require('../../config/config').development;\n\ntype IDatabase = { sequelize: Sequelize };\nexport type IDataType = typeof DataTypes;\n\nconst {\n  DB_DATABASE, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT,\n} = config.DB;\n\nconst sequelize = new Sequelize(\n  `postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}?ssl=true&sslmode=no-verify`,\n  {\n    // logging: process.env.NODE_ENV === 'development' ? console.log : false,\n    logging: false,\n  },\n);\n\nconst db = {};\n\nconst role = require('./role').default(sequelize, DataTypes);\nconst department = require('./department').default(sequelize, DataTypes);\nconst birthdayReminder = require('./birthdayReminder').default(\n  sequelize,\n  DataTypes,\n);\nconst branch = require('./branch').default(sequelize, DataTypes);\nconst designation = require('./designation').default(sequelize, DataTypes);\nconst template = require('./template').default(sequelize, DataTypes);\nconst userProfile = require('./userProfile').default(sequelize, DataTypes);\nconst userVerification = require('./userVerification').default(\n  sequelize,\n  DataTypes,\n);\nconst userModel = require('./user').default(sequelize, DataTypes);\n\ndb[role.name] = role;\ndb[birthdayReminder.name] = birthdayReminder;\ndb[branch.name] = branch;\ndb[designation.name] = designation;\ndb[userProfile.name] = userProfile;\ndb[userVerification.name] = userVerification;\ndb[department.name] = department;\ndb[template.name] = template;\ndb[userModel.name] = userModel;\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\n(db as IDatabase).sequelize = sequelize;\n\nexport default (db as IDatabase).sequelize;\n"],"names":["dbConfig","require","development","DB_DATABASE","DB_USER","DB_PASSWORD","DB_HOST","DB_PORT","config","DB","sequelize","Sequelize","logging","db","role","default","DataTypes","department","birthdayReminder","branch","designation","template","userProfile","userVerification","userModel","name","Object","keys","forEach","modelName","associate"],"mappings":"AAAA;;;;+BAwDA;;aAAA;;2BAxDqC;wBACd;AAEvB,MAAMA,WAAWC,QAAQ,uBAAuBC,WAAW;AAK3D,MAAM,EACJC,YAAW,EAAEC,QAAO,EAAEC,YAAW,EAAEC,QAAO,EAAEC,QAAO,EACpD,GAAGC,cAAM,CAACC,EAAE;AAEb,MAAMC,YAAY,IAAIC,oBAAS,CAC7B,CAAC,aAAa,EAAEP,QAAQ,CAAC,EAAEC,YAAY,CAAC,EAAEC,QAAQ,CAAC,EAAEC,QAAQ,CAAC,EAAEJ,YAAY,2BAA2B,CAAC,EACxG;IAEES,SAAS,KAAK;AAChB;AAGF,MAAMC,KAAK,CAAC;AAEZ,MAAMC,OAAOb,QAAQ,UAAUc,OAAO,CAACL,WAAWM,oBAAS;AAC3D,MAAMC,aAAahB,QAAQ,gBAAgBc,OAAO,CAACL,WAAWM,oBAAS;AACvE,MAAME,mBAAmBjB,QAAQ,sBAAsBc,OAAO,CAC5DL,WACAM,oBAAS;AAEX,MAAMG,SAASlB,QAAQ,YAAYc,OAAO,CAACL,WAAWM,oBAAS;AAC/D,MAAMI,cAAcnB,QAAQ,iBAAiBc,OAAO,CAACL,WAAWM,oBAAS;AACzE,MAAMK,WAAWpB,QAAQ,cAAcc,OAAO,CAACL,WAAWM,oBAAS;AACnE,MAAMM,cAAcrB,QAAQ,iBAAiBc,OAAO,CAACL,WAAWM,oBAAS;AACzE,MAAMO,mBAAmBtB,QAAQ,sBAAsBc,OAAO,CAC5DL,WACAM,oBAAS;AAEX,MAAMQ,YAAYvB,QAAQ,UAAUc,OAAO,CAACL,WAAWM,oBAAS;AAEhEH,EAAE,CAACC,KAAKW,IAAI,CAAC,GAAGX;AAChBD,EAAE,CAACK,iBAAiBO,IAAI,CAAC,GAAGP;AAC5BL,EAAE,CAACM,OAAOM,IAAI,CAAC,GAAGN;AAClBN,EAAE,CAACO,YAAYK,IAAI,CAAC,GAAGL;AACvBP,EAAE,CAACS,YAAYG,IAAI,CAAC,GAAGH;AACvBT,EAAE,CAACU,iBAAiBE,IAAI,CAAC,GAAGF;AAC5BV,EAAE,CAACI,WAAWQ,IAAI,CAAC,GAAGR;AACtBJ,EAAE,CAACQ,SAASI,IAAI,CAAC,GAAGJ;AACpBR,EAAE,CAACW,UAAUC,IAAI,CAAC,GAAGD;AAErBE,OAAOC,IAAI,CAACd,IAAIe,OAAO,CAAC,CAACC,YAAc;IACrC,IAAIhB,EAAE,CAACgB,UAAU,CAACC,SAAS,EAAE;QAC3BjB,EAAE,CAACgB,UAAU,CAACC,SAAS,CAACjB;IAC1B,CAAC;AACH;AAECA,GAAiBH,SAAS,GAAGA;MAE9B,WAAe,AAACG,GAAiBH,SAAS"}