{"version":3,"sources":["../../src/middlewares/auth.middlewares.ts"],"sourcesContent":["import { Response, NextFunction } from 'express';\nimport { UnauthorizedException } from '../exceptions';\nimport db from '../databases/models';\nimport { jwtService } from '../services/jwt/jwt.services';\nimport { ErrorMessage } from '../constants/error.message.constants';\nimport { asyncHandler } from '../middlewares/async.middleware';\nimport { UserRoles } from '../constants/enum.constants';\n\nconst { users } = db.models;\n// @desc   Verify Token Middleware\nexport const authMiddleware = asyncHandler(async (req: any, _: Response, next: NextFunction) => {\n  // 1) Getting token and check of it's there\n  let token;\n  const { authorization } = req.headers;\n  if (authorization && authorization.startsWith('Bearer')) {\n    // eslint-disable-next-line prefer-destructuring\n    token = authorization.split(' ')[1];\n  } else if (req.cookies?.token) {\n    token = req.cookies.token;\n  }\n\n  if (!token) {\n    return next(new UnauthorizedException(ErrorMessage.NOT_LOGGED_IN));\n  }\n\n  // 2) Verification token\n  const decoded: any = await jwtService.verifyToken(token);\n  if (!decoded || !decoded.id) {\n    return next(new UnauthorizedException(ErrorMessage.USER_WITH_TOKEN_NOT_EXIST));\n  }\n\n  // 3) Check if user still exists\n  const currentUser: any = await users.findByPk(decoded.id);\n  if (!currentUser) {\n    return next(new UnauthorizedException(ErrorMessage.USER_WITH_TOKEN_NOT_EXIST));\n  }\n\n  // Check if user changed password after the token was issued\n  // if (currentUser?.changedPasswordAfter(decoded.iat)) {\n  //   return next(new UnauthorizedException(ErrorMessage.RECENTLY_CHANGED_PASSWORD));\n  // }\n\n  // GRANT ACCESS TO PROTECTED ROUTE\n  req.user = currentUser;\n  return next();\n});\n\n// @desc   Verify Token Middleware\nexport const checkRoleMiddleware = asyncHandler(async (req: any, _: Response, next: NextFunction) => {\n  // 1) Getting token and check of it's there\n  let token;\n  const { authorization } = req.headers;\n  if (authorization && authorization.startsWith('Bearer')) {\n    // eslint-disable-next-line prefer-destructuring\n    token = authorization.split(' ')[1];\n  } else if (req.cookies?.token) {\n    token = req.cookies.token;\n  }\n\n  if (!token) {\n    return next(new UnauthorizedException(ErrorMessage.NOT_LOGGED_IN));\n  }\n\n  // 2) Verification token\n  const decoded: any = await jwtService.verifyToken(token);\n  // if (!decoded || !decoded.id || !decoded.role) {\n  //   return next(new UnauthorizedException(ErrorMessage.USER_WITH_TOKEN_NOT_EXIST));\n  // }\n\n  console.log(decoded);\n  if (decoded.role !== UserRoles.ADMIN) {\n    return next(new UnauthorizedException(ErrorMessage.UNAUTHORIZED_ACCESS));\n  }\n\n  // 3) Check if user still exists\n  const currentUser: any = await users.findByPk(decoded.id);\n  if (!currentUser) {\n    return next(new UnauthorizedException(ErrorMessage.USER_WITH_TOKEN_NOT_EXIST));\n  }\n\n  // Check if user changed password after the token was issued\n  // if (currentUser?.changedPasswordAfter(decoded.iat)) {\n  //   return next(new UnauthorizedException(ErrorMessage.RECENTLY_CHANGED_PASSWORD));\n  // }\n\n  // GRANT ACCESS TO PROTECTED ROUTE\n  req.user = currentUser;\n  return next();\n});\n"],"names":["authMiddleware","checkRoleMiddleware","users","db","models","asyncHandler","req","_","next","token","authorization","headers","startsWith","split","cookies","UnauthorizedException","ErrorMessage","NOT_LOGGED_IN","decoded","jwtService","verifyToken","id","USER_WITH_TOKEN_NOT_EXIST","currentUser","findByPk","user","console","log","role","UserRoles","ADMIN","UNAUTHORIZED_ACCESS"],"mappings":"AAAA;;;;;;;;;;;IAUaA,cAAc,MAAdA;IAsCAC,mBAAmB,MAAnBA;;4BA/CyB;+CACvB;6BACY;uCACE;iCACA;+BACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE1B,MAAM,EAAEC,MAAK,EAAE,GAAGC,eAAE,CAACC,MAAM;AAEpB,MAAMJ,iBAAiBK,IAAAA,6BAAY;eAAC,kBAAA,UAAOC,KAAUC,GAAaC,MAAuB;YAOnFF;QALX,IAAIG;QACJ,MAAM,EAAEC,cAAa,EAAE,GAAGJ,IAAIK,OAAO;QACrC,IAAID,iBAAiBA,cAAcE,UAAU,CAAC,WAAW;YAEvDH,QAAQC,cAAcG,KAAK,CAAC,IAAI,CAAC,EAAE;QACrC,OAAO,IAAIP,CAAAA,eAAAA,IAAIQ,OAAO,cAAXR,0BAAAA,KAAAA,IAAAA,aAAaG,KAAK,EAAE;YAC7BA,QAAQH,IAAIQ,OAAO,CAACL,KAAK;QAC3B,CAAC;QAED,IAAI,CAACA,OAAO;YACV,OAAOD,KAAK,IAAIO,iCAAqB,CAACC,mCAAY,CAACC,aAAa;QAClE,CAAC;QAGD,MAAMC,UAAe,MAAMC,uBAAU,CAACC,WAAW,CAACX;QAClD,IAAI,CAACS,WAAW,CAACA,QAAQG,EAAE,EAAE;YAC3B,OAAOb,KAAK,IAAIO,iCAAqB,CAACC,mCAAY,CAACM,yBAAyB;QAC9E,CAAC;QAGD,MAAMC,cAAmB,MAAMrB,MAAMsB,QAAQ,CAACN,QAAQG,EAAE;QACxD,IAAI,CAACE,aAAa;YAChB,OAAOf,KAAK,IAAIO,iCAAqB,CAACC,mCAAY,CAACM,yBAAyB;QAC9E,CAAC;QAQDhB,IAAImB,IAAI,GAAGF;QACX,OAAOf;IACT;oBAnCkDF,KAAUC,GAAaC;;;;AAsClE,MAAMP,sBAAsBI,IAAAA,6BAAY;eAAC,kBAAA,UAAOC,KAAUC,GAAaC,MAAuB;YAOxFF;QALX,IAAIG;QACJ,MAAM,EAAEC,cAAa,EAAE,GAAGJ,IAAIK,OAAO;QACrC,IAAID,iBAAiBA,cAAcE,UAAU,CAAC,WAAW;YAEvDH,QAAQC,cAAcG,KAAK,CAAC,IAAI,CAAC,EAAE;QACrC,OAAO,IAAIP,CAAAA,eAAAA,IAAIQ,OAAO,cAAXR,0BAAAA,KAAAA,IAAAA,aAAaG,KAAK,EAAE;YAC7BA,QAAQH,IAAIQ,OAAO,CAACL,KAAK;QAC3B,CAAC;QAED,IAAI,CAACA,OAAO;YACV,OAAOD,KAAK,IAAIO,iCAAqB,CAACC,mCAAY,CAACC,aAAa;QAClE,CAAC;QAGD,MAAMC,UAAe,MAAMC,uBAAU,CAACC,WAAW,CAACX;QAKlDiB,QAAQC,GAAG,CAACT;QACZ,IAAIA,QAAQU,IAAI,KAAKC,wBAAS,CAACC,KAAK,EAAE;YACpC,OAAOtB,KAAK,IAAIO,iCAAqB,CAACC,mCAAY,CAACe,mBAAmB;QACxE,CAAC;QAGD,MAAMR,cAAmB,MAAMrB,MAAMsB,QAAQ,CAACN,QAAQG,EAAE;QACxD,IAAI,CAACE,aAAa;YAChB,OAAOf,KAAK,IAAIO,iCAAqB,CAACC,mCAAY,CAACM,yBAAyB;QAC9E,CAAC;QAQDhB,IAAImB,IAAI,GAAGF;QACX,OAAOf;IACT;oBAxCuDF,KAAUC,GAAaC"}