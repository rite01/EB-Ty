{"version":3,"sources":["../../../src/services/user/index.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { BadRequestException, ConflictException } from '../../exceptions';\nimport { IUser } from '../../interfaces';\nimport { CreateUserDto } from '../../dtos/user.dtos';\nimport db from '../../databases/models';\nimport { isEmpty } from '../../utils/utils';\nimport { bcryptService } from '../bcrypt';\n\nconst {\n  roles, users,\n} = db.models;\n\nexport class UserService {\n  public async createUser(userData: any): Promise<IUser> {\n    if (isEmpty(userData)) throw new BadRequestException('userData is empty');\n\n    const findUser: any = await users.findOne({\n      where: { email: userData.email },\n    });\n    if (findUser) {\n      throw new ConflictException(\n        `This email ${userData.email} already exists`,\n      );\n    }\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: any = await users.create({\n      ...userData,\n      password: hashedPassword,\n    });\n\n    return createUserData;\n  }\n\n  public async login(\n    userData: CreateUserDto,\n  ): Promise<any> {\n    if (isEmpty(userData)) throw new BadRequestException('userData is empty');\n\n    const findUser: any = await users.findOne({\n      include: [{\n        model: roles,\n        as: 'role',\n      }],\n      where: { email: userData.email },\n    });\n    if (!findUser) { throw new ConflictException(`This email ${userData.email} was not found`); }\n\n    const isPasswordMatching: boolean = await bcryptService.comparePassword(\n      userData.password.toString(),\n      findUser.password,\n    );\n    if (!isPasswordMatching) { throw new ConflictException('Password is not matching'); }\n\n    const tokenData: any = bcryptService.createToken(findUser);\n\n    return { data: findUser, ...tokenData };\n  }\n\n  public async findAllUser() {\n    const user: any = await users.findAll({\n      include: [{\n        model: roles,\n        as: 'role',\n      }],\n    });\n\n    const foundRoles = await roles.findAll({\n      include: [{\n        model: users,\n        as: 'users',\n      }],\n    });\n    return { user };\n  }\n\n  public async findUserById(userId: any): Promise<IUser> {\n    if (isEmpty(userId)) throw new BadRequestException('UserId is empty');\n\n    const findUser: any = await users.findOne({\n      where: { id: userId },\n      include: {\n        model: roles,\n      },\n    });\n    if (!findUser) throw new ConflictException(\"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async uploadFile(userDataFile: any): Promise<IUser> {\n    if (isEmpty(userDataFile)) throw new BadRequestException('Please select file');\n    const createUserDataFile: any = await users.bulkCreate(userDataFile);\n    return createUserDataFile;\n  }\n\n  public async deleteUser(userId: string): Promise<number> {\n    const result = await users.destroy({\n      where: { id: userId },\n    });\n    if (!result) throw new ConflictException(\"User doesn't exist\");\n    return result;\n  }\n\n  public async updateUserDetail(\n    userId: string,\n    userData: IUser,\n  ): Promise<[affectedCount: number, affectedRows: any[]]> {\n    const { name, phoneNumber } = userData;\n    if (isEmpty(userData)) throw new BadRequestException('user not found');\n\n    if (name || phoneNumber) {\n      const result = await users.findOne({\n        where: {\n          name, phoneNumber,\n        },\n      });\n      if (result) throw new ConflictException('This user already exists');\n    }\n    const updateUserById: [\n      affectedCount: number,\n      affectedRows: any[],\n    ] = await users.update(\n      {\n        name, phoneNumber,\n      },\n      { where: { id: userId }, returning: true },\n    );\n    if (!updateUserById) throw new ConflictException(\"Designation doesn't exist\");\n\n    return updateUserById;\n  }\n}\n"],"names":["UserService","roles","users","db","models","createUser","userData","isEmpty","BadRequestException","findUser","findOne","where","email","ConflictException","hashedPassword","hash","password","createUserData","create","login","include","model","as","isPasswordMatching","bcryptService","comparePassword","toString","tokenData","createToken","data","findAllUser","user","findAll","foundRoles","findUserById","userId","id","uploadFile","userDataFile","createUserDataFile","bulkCreate","deleteUser","result","destroy","updateUserDetail","name","phoneNumber","updateUserById","update","returning"],"mappings":"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"}