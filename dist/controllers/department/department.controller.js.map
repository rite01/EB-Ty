{"version":3,"sources":["../../../src/controllers/department/department.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { IDepartment } from '../../interfaces';\nimport { CreateUserDto } from '../../dtos/user.dtos';\nimport { DepartmentService } from '../../services/department';\n\nexport class DepartmentController {\n  private departmentService = new DepartmentService();\n\n  /**\n   * @swagger\n   *\n   * /department/create:\n   *   post:\n   *     tags:\n   *      - Department\n   *     description: Cerate department\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - name\n   *          - level\n   *      properties:\n   *        name:\n   *          type: string\n   *          description: User name\n   *        level:\n   *          type: enum\n   *          description: User email\n   */\n\n  public createDepartment = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const departmentData: CreateUserDto = req.body;\n      const createDepartmentData: IDepartment = await this.departmentService.createDepartment(departmentData);\n\n      return res.status(201).json({ data: createDepartmentData, status: 200, message: 'department created successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /department/getAll:\n   *   get:\n   *     tags:\n   *      - Department\n   *     description: Get all department\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getAllDepartments = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const findAllUsersData: IDepartment[] = await this.departmentService.findAllDepartment();\n\n      return res.status(200).json({ data: findAllUsersData, status: 200, message: 'departments fetched successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /department/getAll/:id:\n   *   get:\n   *     tags:\n   *      - Department\n   *     description: Get department by id\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getDepartmentById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const departmentId: string = req.params.id;\n      const findOneUserData: IDepartment = await this.departmentService.findDepartmentById(departmentId);\n\n      return res.status(200).json({ data: findOneUserData, status: 200, message: 'success' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /department/update/:id:\n   *   patch:\n   *     tags:\n   *      - Department\n   *     description: Update department\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - name\n   *          - description\n   *          - logo\n   *      properties:\n   *        name:\n   *          type: string\n   *          description: designation name\n   *        description:\n   *          type: string\n   *          description: description\n   *        logo:\n   *          type: string\n   *          description: logo\n   */\n\n  public updateDepartment = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const departmentId: string = req.params.id;\n      const departmentData: CreateUserDto = req.body;\n      const updateDepartmentData: [affectedCount: number, affectedRows: any[]] = await this.departmentService.updateDepartment(departmentId, departmentData);\n\n      return res.status(200).json({ data: updateDepartmentData, status: 200, message: 'department updated successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /department/delete/:id:\n   *   delete:\n   *     tags:\n   *      - Department\n   *     description: department Delete\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public deleteDepartment = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const departmentId: string = req.params.id;\n      const deleteDepartmentData = await this.departmentService.deleteDepartment(departmentId);\n\n      return res.status(200).json({ data: deleteDepartmentData, status: 200, message: 'department deleted successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n}\n"],"names":["DepartmentController","departmentService","DepartmentService","createDepartment","req","res","next","departmentData","body","createDepartmentData","status","json","data","message","error","getAllDepartments","findAllUsersData","findAllDepartment","getDepartmentById","departmentId","params","id","findOneUserData","findDepartmentById","updateDepartment","updateDepartmentData","deleteDepartment","deleteDepartmentData"],"mappings":"AAAA;;;;+BAKaA;;aAAAA;;4BAFqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3B,IAAA,AAAMA,uBAAN,MAAMA;;aACHC,oBAAoB,IAAIC,6BAAiB;;aAoC1CC;uBAAmB,kBAAA,UAAOC,KAAcC,KAAeC,MAAuB;gBACnF,IAAI;oBACF,MAAMC,iBAAgCH,IAAII,IAAI;oBAC9C,MAAMC,uBAAoC,MAAM,MAAKR,iBAAiB,CAACE,gBAAgB,CAACI;oBAExF,OAAOF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMH;wBAAsBC,QAAQ;wBAAKG,SAAS;oBAAkC;gBACpH,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BATiCV,KAAcC,KAAeC;;;;;aA0BvDS;uBAAoB,kBAAA,UAAOX,KAAcC,KAAeC,MAAuB;gBACpF,IAAI;oBACF,MAAMU,mBAAkC,MAAM,OAAKf,iBAAiB,CAACgB,iBAAiB;oBAEtF,OAAOZ,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMI;wBAAkBN,QAAQ;wBAAKG,SAAS;oBAAmC;gBACjH,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BARkCV,KAAcC,KAAeC;;;;;aAyBxDY;uBAAoB,kBAAA,UAAOd,KAAcC,KAAeC,MAAuB;gBACpF,IAAI;oBACF,MAAMa,eAAuBf,IAAIgB,MAAM,CAACC,EAAE;oBAC1C,MAAMC,kBAA+B,MAAM,OAAKrB,iBAAiB,CAACsB,kBAAkB,CAACJ;oBAErF,OAAOd,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMU;wBAAiBZ,QAAQ;wBAAKG,SAAS;oBAAU;gBACvF,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BATkCV,KAAcC,KAAeC;;;;;aAiDxDkB;uBAAmB,kBAAA,UAAOpB,KAAcC,KAAeC,MAAuB;gBACnF,IAAI;oBACF,MAAMa,eAAuBf,IAAIgB,MAAM,CAACC,EAAE;oBAC1C,MAAMd,iBAAgCH,IAAII,IAAI;oBAC9C,MAAMiB,uBAAqE,MAAM,OAAKxB,iBAAiB,CAACuB,gBAAgB,CAACL,cAAcZ;oBAEvI,OAAOF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMa;wBAAsBf,QAAQ;wBAAKG,SAAS;oBAAkC;gBACpH,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BAViCV,KAAcC,KAAeC;;;;;aA2BvDoB;uBAAmB,kBAAA,UAAOtB,KAAcC,KAAeC,MAAuB;gBACnF,IAAI;oBACF,MAAMa,eAAuBf,IAAIgB,MAAM,CAACC,EAAE;oBAC1C,MAAMM,uBAAuB,MAAM,OAAK1B,iBAAiB,CAACyB,gBAAgB,CAACP;oBAE3E,OAAOd,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMe;wBAAsBjB,QAAQ;wBAAKG,SAAS;oBAAkC;gBACpH,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BATiCV,KAAcC,KAAeC;;;;;AAUhE"}