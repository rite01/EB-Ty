{"version":3,"sources":["../../src/middlewares/error.middleware.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\n\nimport { logger } from '../libs';\nimport { config } from '../config';\nimport { ErrorMessage, HttpMessage, HttpStatus } from '../constants';\nimport { BadRequestException, UnauthorizedException } from '../exceptions';\n\nconst handleCastErrorDB = (err: any): BadRequestException => {\n  const message = `Invalid ${err?.path}: ${err?.value}.`;\n  return new BadRequestException(message);\n};\n\nconst handleDuplicateFieldsDB = (err: any): BadRequestException => {\n  const value = err?.message?.match(/([\"'])(\\\\?.)*?\\1/)[0];\n  const message = `Duplicate field value: ${value}. Please use another value!`;\n  return new BadRequestException(message);\n};\n\nconst handleValidationErrorDB = (err: any): BadRequestException => {\n  const errors = Object.values(err?.errors)?.map((el: any) => el?.message);\n  const message = `Invalid input data. ${errors.join('. ')}`;\n  return new BadRequestException(message);\n};\n\nconst logError = (err: any, req: Request, res: Response): void => {\n  const message: string = err?.message || res?.statusMessage || ErrorMessage.SOMETHING_WENT_WRONG;\n  logger.error(`${err?.status} - ${req.originalUrl} [${req.method}] - ${message} `);\n};\n\nconst handleJWTError = (err: any): UnauthorizedException => {\n  const error = { ...err, message: ErrorMessage.INVALID_TOKEN };\n  return new UnauthorizedException(error.message);\n};\n\nconst handleJWTExpiredError = (err: any): UnauthorizedException => {\n  const error = { ...err, message: ErrorMessage.TOKEN_EXPIRED };\n  return new UnauthorizedException(error.message);\n};\n\nconst sendError = (err: any, req: Request, res: Response) => {\n  if (config.isDevelopment) {\n    console.error('Error ðŸ’¥', {\n      status: err.status,\n      method: req.method,\n      path: req.path,\n      timestamp: new Date(),\n      message: err.message,\n    });\n  }\n  logError(err, req, res);\n  return res.status(err.status).json({\n    status: err.status,\n    message: err.message,\n  });\n};\n\nexport const errorMiddleware = (err: any, req: Request, res: Response, next: NextFunction): void => {\n  try {\n    let error = { ...err }; // Don't change to const\n    error.status = err?.status || HttpStatus.INTERNAL_SERVER_ERROR;\n    error.message = err?.message || HttpMessage.INTERNAL_SERVER_ERROR;\n    if (error?.name === 'CastError') error = handleCastErrorDB(error);\n    if (error?.code === 11000) error = handleDuplicateFieldsDB(error);\n    if (error?.name === 'ValidationError') error = handleValidationErrorDB(error);\n    if (error?.name === 'JsonWebTokenError') error = handleJWTError(err);\n    if (error?.name === 'TokenExpiredError') error = handleJWTExpiredError(err);\n    sendError(error, req, res);\n  } catch (error) {\n    console.log(error);\n    next(error);\n  }\n};\n"],"names":["errorMiddleware","handleCastErrorDB","err","message","path","value","BadRequestException","handleDuplicateFieldsDB","match","handleValidationErrorDB","Object","errors","values","map","el","join","logError","req","res","statusMessage","ErrorMessage","SOMETHING_WENT_WRONG","logger","error","status","originalUrl","method","handleJWTError","INVALID_TOKEN","UnauthorizedException","handleJWTExpiredError","TOKEN_EXPIRED","sendError","config","isDevelopment","console","timestamp","Date","json","next","HttpStatus","INTERNAL_SERVER_ERROR","HttpMessage","name","code","log"],"mappings":"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"}