{"version":3,"sources":["../../../src/libs/logger/logger.ts"],"sourcesContent":["/* eslint-disable new-cap */\nimport { existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport { createLogger, format, transports } from 'winston';\nimport winstonDaily from 'winston-daily-rotate-file';\nimport { config } from '../../config/index';\nimport { utilities } from './logger.utilities';\n\n// logs dir\nconst logDir: string = join(__dirname, config.LOGS.DIR);\n\nif (config.isDevelopment && !existsSync(logDir)) {\n  mkdirSync(logDir);\n}\n\n// Define log format\n/*\n * Log Level\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\n */\nconst logger = createLogger({\n  format: format.combine(\n    format.timestamp(),\n    format.printf((info) => {\n      if (info.level === 'error') console.log(info.message);\n      return utilities.format.getFormattedLogs(config.APP_NAME, info);\n    }),\n  ),\n  transports: config.isDevelopment ? [\n    // debug log setting\n    new winstonDaily({\n      level: 'debug',\n      datePattern: 'YYYY-MM-DD',\n      dirname: `${logDir}/debug`, // log file /logs/debug/*.log in save\n      filename: '%DATE%.log',\n      maxFiles: 30, // 30 Days saved\n      json: false,\n      zippedArchive: true,\n    }),\n    // error log setting\n    new winstonDaily({\n      level: 'error',\n      datePattern: 'YYYY-MM-DD',\n      dirname: `${logDir}/error`, // log file /logs/error/*.log in save\n      filename: '%DATE%.log',\n      maxFiles: 30, // 30 Days saved\n      handleExceptions: true,\n      json: false,\n      zippedArchive: true,\n    }),\n  ] : [],\n});\n\nlogger.add(\n  new transports.Console({\n    format: format.combine(\n      format.timestamp(),\n      format.ms(),\n      utilities.format.consoleFormat(config.APP_NAME, {\n        colors: true,\n        prettyPrint: true,\n      }),\n    ),\n  }),\n  // new transports.Console({ format: format.combine(format.splat(), format.colorize()) })\n);\n\nconst stream = {\n  write: (message: string) => {\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\n  },\n};\n\nexport { logger, stream };\n"],"names":["logger","stream","logDir","join","__dirname","config","LOGS","DIR","isDevelopment","existsSync","mkdirSync","createLogger","format","combine","timestamp","printf","info","level","console","log","message","utilities","getFormattedLogs","APP_NAME","transports","winstonDaily","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","ms","consoleFormat","colors","prettyPrint","write","substring","lastIndexOf"],"mappings":"AACA;;;;;;;;;;;IAwESA,MAAM,MAANA;IAAQC,MAAM,MAANA;;oBAxEqB;sBACjB;yBAC4B;+DACxB;uBACF;iCACG;;;;;;AAG1B,MAAMC,SAAiBC,IAAAA,UAAI,EAACC,WAAWC,aAAM,CAACC,IAAI,CAACC,GAAG;AAEtD,IAAIF,aAAM,CAACG,aAAa,IAAI,CAACC,IAAAA,cAAU,EAACP,SAAS;IAC/CQ,IAAAA,aAAS,EAACR;AACZ,CAAC;AAOD,MAAMF,SAASW,IAAAA,qBAAY,EAAC;IAC1BC,QAAQA,eAAM,CAACC,OAAO,CACpBD,eAAM,CAACE,SAAS,IAChBF,eAAM,CAACG,MAAM,CAAC,CAACC,OAAS;QACtB,IAAIA,KAAKC,KAAK,KAAK,SAASC,QAAQC,GAAG,CAACH,KAAKI,OAAO;QACpD,OAAOC,0BAAS,CAACT,MAAM,CAACU,gBAAgB,CAACjB,aAAM,CAACkB,QAAQ,EAAEP;IAC5D;IAEFQ,YAAYnB,aAAM,CAACG,aAAa,GAAG;QAEjC,IAAIiB,+BAAY,CAAC;YACfR,OAAO;YACPS,aAAa;YACbC,SAAS,CAAC,EAAEzB,OAAO,MAAM,CAAC;YAC1B0B,UAAU;YACVC,UAAU;YACVC,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;QAEA,IAAIN,+BAAY,CAAC;YACfR,OAAO;YACPS,aAAa;YACbC,SAAS,CAAC,EAAEzB,OAAO,MAAM,CAAC;YAC1B0B,UAAU;YACVC,UAAU;YACVG,kBAAkB,IAAI;YACtBF,MAAM,KAAK;YACXC,eAAe,IAAI;QACrB;KACD,GAAG,EAAE;AACR;AAEA/B,OAAOiC,GAAG,CACR,IAAIT,mBAAU,CAACU,OAAO,CAAC;IACrBtB,QAAQA,eAAM,CAACC,OAAO,CACpBD,eAAM,CAACE,SAAS,IAChBF,eAAM,CAACuB,EAAE,IACTd,0BAAS,CAACT,MAAM,CAACwB,aAAa,CAAC/B,aAAM,CAACkB,QAAQ,EAAE;QAC9Cc,QAAQ,IAAI;QACZC,aAAa,IAAI;IACnB;AAEJ;AAIF,MAAMrC,SAAS;IACbsC,OAAO,CAACnB,UAAoB;QAC1BpB,OAAOgB,IAAI,CAACI,QAAQoB,SAAS,CAAC,GAAGpB,QAAQqB,WAAW,CAAC;IACvD;AACF"}