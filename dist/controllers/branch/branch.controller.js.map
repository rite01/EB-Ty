{"version":3,"sources":["../../../src/controllers/branch/branch.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { IBranch } from '../../interfaces';\nimport { CreateUserDto } from '../../dtos/user.dtos';\nimport { BranchService } from '../../services';\n\nexport class BranchController {\n  private branchService = new BranchService();\n\n  /**\n   * @swagger\n   *\n   * /branch/create:\n   *   post:\n   *     tags:\n   *      - Branch\n   *     description: Cerate branch\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - buildingNo\n   *          - street\n   *          - landmark\n   *          - city\n   *          - state\n   *          - country\n   *          - zipCode\n   *      properties:\n   *        buildingNo:\n   *          type: integer\n   *          description: building number\n   *        street:\n   *          type: string\n   *          description: street\n   *        landmark:\n   *          type: string\n   *          description: landmark\n   *        city:\n   *          type: string\n   *          description: city\n   *        state:\n   *          type: string\n   *          description: state\n   *        country:\n   *          type: string\n   *          description: country\n   *        zipCode:\n   *          type: integer\n   *          description: zipCode\n   */\n\n  public createBranch = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const departmentData: CreateUserDto = req.body;\n      const data: IBranch = await this.branchService.createBranch(departmentData);\n\n      return res.status(201).json({ data, status: 200, message: 'branch created successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /branch/getAll:\n   *   get:\n   *     tags:\n   *      - Branch\n   *     description: Get all branch\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getAllBranches = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const data: IBranch[] = await this.branchService.findAllBranches();\n\n      return res.status(200).json({ data, status: 200, message: 'branches fetched successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /branch/getAll/:id:\n   *   get:\n   *     tags:\n   *      - Branch\n   *     description: Get branch by id\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getBranchById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const data: IBranch = await this.branchService.findBranchById(id);\n\n      return res.status(200).json({ data, status: 200, message: 'success' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /branch/create:\n   *   patch:\n   *     tags:\n   *      - Branch\n   *     description: Cerate branch\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - buildingNo\n   *          - street\n   *          - landmark\n   *          - city\n   *          - state\n   *          - country\n   *          - zipCode\n   *      properties:\n   *        buildingNo:\n   *          type: integer\n   *          description: building number\n   *        street:\n   *          type: string\n   *          description: street\n   *        landmark:\n   *          type: string\n   *          description: landmark\n   *        city:\n   *          type: string\n   *          description: city\n   *        state:\n   *          type: string\n   *          description: state\n   *        country:\n   *          type: string\n   *          description: country\n   *        zipCode:\n   *          type: integer\n   *          description: zipCode\n   */\n\n  public updateBranch = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const branchData: IBranch = req.body;\n      const data = await this.branchService.updateBranch(id, branchData);\n\n      return res.status(200).json({ data, status: 200, message: 'branch updated successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /branch/delete/:id:\n   *   delete:\n   *     tags:\n   *      - Branch\n   *     description: branch Delete\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public deleteBranch = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const data = await this.branchService.deleteBranch(id);\n\n      return res.status(200).json({ data, status: 200, message: 'branch deleted successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n}\n"],"names":["BranchController","branchService","BranchService","createBranch","req","res","next","departmentData","body","data","status","json","message","error","getAllBranches","findAllBranches","getBranchById","id","params","findBranchById","updateBranch","branchData","deleteBranch"],"mappings":"AAAA;;;;+BAKaA;;aAAAA;;0BAFiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEvB,IAAA,AAAMA,mBAAN,MAAMA;;aACHC,gBAAgB,IAAIC,uBAAa;;aAwDlCC;uBAAe,kBAAA,UAAOC,KAAcC,KAAeC,MAAuB;gBAC/E,IAAI;oBACF,MAAMC,iBAAgCH,IAAII,IAAI;oBAC9C,MAAMC,OAAgB,MAAM,MAAKR,aAAa,CAACE,YAAY,CAACI;oBAE5D,OAAOF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEF;wBAAMC,QAAQ;wBAAKE,SAAS;oBAA8B;gBAC1F,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAT6BT,KAAcC,KAAeC;;;;;aA0BnDQ;uBAAiB,kBAAA,UAAOV,KAAcC,KAAeC,MAAuB;gBACjF,IAAI;oBACF,MAAMG,OAAkB,MAAM,OAAKR,aAAa,CAACc,eAAe;oBAEhE,OAAOV,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEF;wBAAMC,QAAQ;wBAAKE,SAAS;oBAAgC;gBAC5F,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAR+BT,KAAcC,KAAeC;;;;;aAyBrDU;uBAAgB,kBAAA,UAAOZ,KAAcC,KAAeC,MAAuB;gBAChF,IAAI;oBACF,MAAM,EAAEW,GAAE,EAAE,GAAGb,IAAIc,MAAM;oBACzB,MAAMT,OAAgB,MAAM,OAAKR,aAAa,CAACkB,cAAc,CAACF;oBAE9D,OAAOZ,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEF;wBAAMC,QAAQ;wBAAKE,SAAS;oBAAU;gBACtE,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAT8BT,KAAcC,KAAeC;;;;;aAiEpDc;uBAAe,kBAAA,UAAOhB,KAAcC,KAAeC,MAAuB;gBAC/E,IAAI;oBACF,MAAM,EAAEW,GAAE,EAAE,GAAGb,IAAIc,MAAM;oBACzB,MAAMG,aAAsBjB,IAAII,IAAI;oBACpC,MAAMC,OAAO,MAAM,OAAKR,aAAa,CAACmB,YAAY,CAACH,IAAII;oBAEvD,OAAOhB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEF;wBAAMC,QAAQ;wBAAKE,SAAS;oBAA8B;gBAC1F,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAV6BT,KAAcC,KAAeC;;;;;aA2BnDgB;uBAAe,kBAAA,UAAOlB,KAAcC,KAAeC,MAAuB;gBAC/E,IAAI;oBACF,MAAM,EAAEW,GAAE,EAAE,GAAGb,IAAIc,MAAM;oBACzB,MAAMT,OAAO,MAAM,OAAKR,aAAa,CAACqB,YAAY,CAACL;oBAEnD,OAAOZ,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEF;wBAAMC,QAAQ;wBAAKE,SAAS;oBAA8B;gBAC1F,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAT6BT,KAAcC,KAAeC;;;;;AAU5D"}