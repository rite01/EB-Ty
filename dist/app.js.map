{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import 'reflect-metadata';\nimport express, { Application, Request } from 'express';\nimport { join } from 'path';\nimport { Server } from 'http';\nimport swaggerUi from 'swagger-ui-express';\nimport cors from 'cors';\nimport { errorMiddleware } from './middlewares';\nimport { loggerService } from './libs';\nimport { ErrorMessage, RoutesConstants } from './constants';\nimport { config } from './config';\nimport db from './databases/models';\nimport { Routes } from './interfaces/routes.interface';\nimport {\n  DepartmentRoute, BranchRoute, IndexRoute, DesignationRoute, UserProfileRoute,\n} from './routes';\nimport { UsersRoute } from './routes/user.routes';\nimport { NotFoundException } from './exceptions';\nimport { swaggerSpecs } from './utils/swagger.utils';\nimport { RoleRoute } from './routes/role.routes';\n\nprocess.on('uncaughtException', (err: Error) => {\n  console.log(`UNCAUGHT EXCEPTION! ${err?.name}: ${err?.message}`);\n  loggerService.logger.error(`UNCAUGHT EXCEPTION! ${err?.name}: ${err?.message}`, () => process.exit(1));\n});\n\nclass App {\n  public app: Application;\n\n  public env: string;\n\n  public port: number | boolean;\n\n  public server: Server | undefined;\n\n  constructor() {\n    this.app = express();\n    this.env = config.NODE_ENV;\n    this.port = config.PORT;\n    this.initializeMiddlewares();\n    this.initializeRoutes();\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public async bootstrap(): Promise<void> {\n    try {\n      await db.authenticate().then(() => {\n        loggerService.info(`Database connected ðŸ”¥ on ${this.env} mode...`, {\n          controller: App.name,\n          function: 'bootstrap',\n        });\n        this.listen();\n      });\n    } catch (error: any) {\n      loggerService.error(`Database not connected: ${error?.message}`, {\n        controller: App.name,\n        function: 'bootstrap',\n      });\n      process.exit(1);\n    }\n  }\n\n  private listen(): void {\n    this.server = this.app.listen(this.port, () => {\n      loggerService.info(`ðŸš€ App listening on the port ${this.port} ENV: ${this.env} mode...`, {\n        controller: App.name,\n        function: 'listen',\n      });\n    });\n  }\n\n  public getServerInstance(): Application {\n    return this.app;\n  }\n\n  private initializeMiddlewares(): void {\n    this.app.use(cors({ origin: config.CORS.ORIGIN, credentials: config.CORS.CREDENTIALS }));\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(express.static(join(__dirname, 'public')));\n  }\n\n  private initializeRoutes(): void {\n    const routes: Routes[] = [\n      IndexRoute,\n      UsersRoute,\n      DepartmentRoute,\n      BranchRoute,\n      DesignationRoute,\n      RoleRoute,\n      UserProfileRoute,\n    ];\n    routes?.forEach((route) => this.app.use((route.path), route.router));\n  }\n\n  private initializeSwagger(): void {\n    this.app.use(config.SWAGGER_URL, swaggerUi.serve, swaggerUi.setup(swaggerSpecs));\n  }\n\n  private initializeErrorHandling(): void {\n    this.app.all(RoutesConstants.NOT_FOUND, (req: Request) => {\n      throw new NotFoundException(`Can't find ${req?.originalUrl} on this server!`);\n    });\n    this.app.use(errorMiddleware);\n  }\n}\n\nprocess.on('SIGTERM', () => {\n  console.log(ErrorMessage.SIGTERM);\n  new App().server?.close(() => {\n    loggerService.logger.error('HTTP server closed!');\n  });\n});\n\nprocess.on('unhandledRejection', (err: Error) => {\n  console.log(ErrorMessage.UNCAUGHT_REJECTION);\n  loggerService.logger.error(`UNCAUGHT REJECTION! ${err?.name}: ${err?.message}`, () => process.exit(1));\n});\n\nexport default new App();\n"],"names":["process","on","err","console","log","name","message","loggerService","logger","error","exit","App","bootstrap","db","authenticate","then","info","env","controller","function","listen","server","app","port","getServerInstance","initializeMiddlewares","use","cors","origin","config","CORS","ORIGIN","credentials","CREDENTIALS","express","json","urlencoded","extended","static","join","__dirname","initializeRoutes","routes","IndexRoute","UsersRoute","DepartmentRoute","BranchRoute","DesignationRoute","RoleRoute","UserProfileRoute","forEach","route","path","router","initializeSwagger","SWAGGER_URL","swaggerUi","serve","setup","swaggerSpecs","initializeErrorHandling","all","RoutesConstants","NOT_FOUND","req","NotFoundException","originalUrl","errorMiddleware","constructor","NODE_ENV","PORT","ErrorMessage","SIGTERM","close","UNCAUGHT_REJECTION"],"mappings":"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"}