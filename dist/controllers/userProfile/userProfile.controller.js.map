{"version":3,"sources":["../../../src/controllers/userProfile/userProfile.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { IUserProfile } from '../../interfaces';\nimport { CreateUserDto } from '../../dtos/user.dtos';\nimport { UserProfileService } from '../../services';\n\nexport class UserProfileController {\n  private profileService = new UserProfileService();\n\n  /**\n   * @swagger\n   *\n   * /profile/create:\n   *   post:\n   *     tags:\n   *      - UserProfile\n   *     description: Create User to the application\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - designationId\n   *          - branchId\n   *          - departmentId\n   *          - profileUrl\n   *          - dateOfBirth\n   *          - dateOfJoining\n   *      properties:\n   *        designationId:\n   *          type: string\n   *          description: Designation Id\n   *        branchId:\n   *          type: string\n   *          description: Branch Id\n   *        departmentId:\n   *          type: string\n   *          description: Department Id\n   *        profileUrl:\n   *          type: string\n   *          description: Profile url\n   *        dateOfBirth:\n   *          type: string\n   *          description: User Date Of Birth\n   *        dateOfJoining:\n   *          type: string\n   *          description: User Date Of Joining\n   */\n  public createUserProfiles = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const profileData: CreateUserDto = req.body;\n      const data: IUserProfile = await this.profileService.createUserProfile(profileData);\n\n      return res.status(201).json({ data, status: 200, message: 'user profile created successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /profile/getAll:\n   *   get:\n   *     tags:\n   *      - UserProfile\n   *     description: Get All UserProfile\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getAllProfiles = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const data = await this.profileService.findAllUserProfiles();\n\n      return res.status(200).json({ data, status: 200, message: 'profiles fetched successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /profile/getAll/:id:\n   *   get:\n   *     tags:\n   *      - UserProfile\n   *     description: Login user to the application\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getProfileById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const data: IUserProfile = await this.profileService.findProfilesById(id);\n\n      return res.status(200).json({ data, status: 200, message: 'success' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /profile/update/:id:\n   *   patch:\n   *     tags:\n   *      - UserProfile\n   *     description: Create User to the application\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - designationId\n   *          - branchId\n   *          - departmentId\n   *          - profileUrl\n   *          - dateOfBirth\n   *          - dateOfJoining\n   *      properties:\n   *        designationId:\n   *          type: string\n   *          description: Designation Id\n   *        branchId:\n   *          type: string\n   *          description: Branch Id\n   *        departmentId:\n   *          type: string\n   *          description: Department Id\n   *        profileUrl:\n   *          type: string\n   *          description: Profile url\n   *        dateOfBirth:\n   *          type: string\n   *          description: User Date Of Birth\n   *        dateOfJoining:\n   *          type: string\n   *          description: User Date Of Joining\n   */\n  public updateProfile = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const profileData: IUserProfile = req.body;\n      const data = await this.profileService.updateUserProfile(id, profileData);\n\n      return res.status(200).json({ data, status: 200, message: 'profile updated successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /profile/delete/:id:\n   *   delete:\n   *     tags:\n   *      - UserProfile\n   *     description: Login user to the application\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n  public deleteUserProfile = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const data = await this.profileService.deleteUserProfile(id);\n\n      return res.status(200).json({ data, status: 200, message: 'user deleted successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n}\n"],"names":["UserProfileController","profileService","UserProfileService","createUserProfiles","req","res","next","profileData","body","data","createUserProfile","status","json","message","error","getAllProfiles","findAllUserProfiles","getProfileById","id","params","findProfilesById","updateProfile","updateUserProfile","deleteUserProfile"],"mappings":"AAAA;;;;+BAKaA;;aAAAA;;0BAFsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE5B,IAAA,AAAMA,wBAAN,MAAMA;;aACHC,iBAAiB,IAAIC,4BAAkB;;aAmDxCC;uBAAqB,kBAAA,UAAOC,KAAcC,KAAeC,MAAuB;gBACrF,IAAI;oBACF,MAAMC,cAA6BH,IAAII,IAAI;oBAC3C,MAAMC,OAAqB,MAAM,MAAKR,cAAc,CAACS,iBAAiB,CAACH;oBAEvE,OAAOF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEH;wBAAME,QAAQ;wBAAKE,SAAS;oBAAoC;gBAChG,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BATmCV,KAAcC,KAAeC;;;;;aA0BzDS;uBAAiB,kBAAA,UAAOX,KAAcC,KAAeC,MAAuB;gBACjF,IAAI;oBACF,MAAMG,OAAO,MAAM,OAAKR,cAAc,CAACe,mBAAmB;oBAE1D,OAAOX,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEH;wBAAME,QAAQ;wBAAKE,SAAS;oBAAgC;gBAC5F,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BAR+BV,KAAcC,KAAeC;;;;;aAyBrDW;uBAAiB,kBAAA,UAAOb,KAAcC,KAAeC,MAAuB;gBACjF,IAAI;oBACF,MAAM,EAAEY,GAAE,EAAE,GAAGd,IAAIe,MAAM;oBACzB,MAAMV,OAAqB,MAAM,OAAKR,cAAc,CAACmB,gBAAgB,CAACF;oBAEtE,OAAOb,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEH;wBAAME,QAAQ;wBAAKE,SAAS;oBAAU;gBACtE,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BAT+BV,KAAcC,KAAeC;;;;;aA4DrDe;uBAAgB,kBAAA,UAAOjB,KAAcC,KAAeC,MAAuB;gBAChF,IAAI;oBACF,MAAM,EAAEY,GAAE,EAAE,GAAGd,IAAIe,MAAM;oBACzB,MAAMZ,cAA4BH,IAAII,IAAI;oBAC1C,MAAMC,OAAO,MAAM,OAAKR,cAAc,CAACqB,iBAAiB,CAACJ,IAAIX;oBAE7D,OAAOF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEH;wBAAME,QAAQ;wBAAKE,SAAS;oBAA+B;gBAC3F,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BAV8BV,KAAcC,KAAeC;;;;;aA0BpDiB;uBAAoB,kBAAA,UAAOnB,KAAcC,KAAeC,MAAuB;gBACpF,IAAI;oBACF,MAAM,EAAEY,GAAE,EAAE,GAAGd,IAAIe,MAAM;oBACzB,MAAMV,OAAO,MAAM,OAAKR,cAAc,CAACsB,iBAAiB,CAACL;oBAEzD,OAAOb,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEH;wBAAME,QAAQ;wBAAKE,SAAS;oBAA4B;gBACxF,EAAE,OAAOC,OAAO;oBACd,OAAOR,KAAKQ;gBACd;YACF;4BATkCV,KAAcC,KAAeC;;;;;AAUjE"}