{"version":3,"sources":["../../../src/controllers/user/users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { IUser } from '../../interfaces';\nimport { CreateUserDto } from '../../dtos/user.dtos';\nimport { UserService } from '../../services/user';\nimport { readBuffer } from '../../utils/fs.utils';\n\nclass UsersController {\n  public userService = new UserService();\n\n  /**\n   * @swagger\n   *\n   * /create:\n   *   post:\n   *     tags:\n   *      - Users\n   *     description: Create User to the application\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - name\n   *          - email\n   *          - phoneNumber\n   *          - password\n   *      properties:\n   *        name:\n   *          type: string\n   *          description: User name\n   *        email:\n   *          type: string\n   *          description: User email\n   *        phone:\n   *          type: string\n   *          description: User phone number\n   *        password:\n   *          type: string\n   *          description: User password\n   */\n\n  public createUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userData: CreateUserDto = req.body;\n      const createUserData: IUser = await this.userService.createUser({ ...userData });\n\n      return res.status(201).json({ data: createUserData, status: 200, message: 'created' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /login:\n   *   post:\n   *     tags:\n   *      - Users\n   *     description: Login user to the application\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - email\n   *          - password\n   *      properties:\n   *        email:\n   *          type: string\n   *          description: User email\n   *        password:\n   *          type: string\n   *          description: User password\n   */\n\n  public logIn = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userData: CreateUserDto = req.body;\n      const responseData = await this.userService.login(userData);\n\n      return res.status(200).json({ ...responseData, status: 200, message: 'login successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /getAll:\n   *   get:\n   *     tags:\n   *      - Users\n   *     description: Login user to the application\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getUsers = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const findAllUsersData = await this.userService.findAllUser();\n\n      return res.status(200).json({ data: findAllUsersData, status: 200, message: 'findAll' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /get/:id:\n   *   get:\n   *     tags:\n   *      - Users\n   *     description: Login user to the application\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getUserById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userId: any = req.params.id;\n      const findOneUserData: IUser = await this.userService.findUserById(userId);\n\n      return res.status(200).json({ data: findOneUserData, status: 200, message: 'findOne' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /delete/:id:\n   *   delete:\n   *     tags:\n   *      - Users\n   *     description: Login user to the application\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public deleteUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const data = await this.userService.deleteUser(id);\n\n      return res.status(200).json({ data, status: 200, message: 'user deleted successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /update/:id:\n   *   patch:\n   *     tags:\n   *      - Users\n   *     description: Update user profile\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - name\n   *          - phone\n   *      properties:\n   *        name:\n   *          type: string\n   *          description: user name\n   *        phone:\n   *          type: string\n   *          description: user phone\n   */\n\n  public updateUserDetail = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const userData: IUser = req.body;\n      const data = await this.userService.updateUserDetail(id, userData);\n\n      return res.status(200).json({ data, status: 200, message: 'User updated successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  public uploadUserFile = async (req: any, res: any, next: NextFunction) => {\n    try {\n      if (!req.file) {\n        return res.status(400).send('Please upload a CSV file!');\n      }\n      const data = await readBuffer(req.file.buffer);\n      await this.userService.uploadFile(data);\n      return res.status(200).json({\n        status: 200,\n        message: 'data insert successfully',\n      });\n    } catch (error) {\n      console.log(error);\n      return next(error);\n    }\n  };\n}\n\nexport default UsersController;\n"],"names":["UsersController","userService","UserService","createUser","req","res","next","userData","body","createUserData","status","json","data","message","error","logIn","responseData","login","getUsers","findAllUsersData","findAllUser","getUserById","userId","params","id","findOneUserData","findUserById","deleteUser","updateUserDetail","uploadUserFile","file","send","readBuffer","buffer","uploadFile","console","log"],"mappings":"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"}