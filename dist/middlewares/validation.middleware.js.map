{"version":3,"sources":["../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToInstance } from 'class-transformer';\nimport { validate, ValidationError } from 'class-validator';\nimport { Request, NextFunction, RequestHandler } from 'express';\n\nimport { BadRequestException } from '../exceptions';\n\nexport const validationMiddleware = (\n  type: any,\n  value: string | 'body' | 'query' | 'params' = 'body',\n  skipMissingProperties = false,\n  whitelist = true,\n  forbidNonWhitelisted = true,\n): RequestHandler => (req: Request, _, next: NextFunction) => {\n  validate(plainToInstance(type, req[value]), { skipMissingProperties, whitelist, forbidNonWhitelisted }).then((errors: ValidationError[]) => {\n    if (errors.length > 0) {\n      const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\n      next(new BadRequestException(message));\n    } else {\n      next();\n    }\n  });\n};\n"],"names":["validationMiddleware","type","value","skipMissingProperties","whitelist","forbidNonWhitelisted","req","_","next","validate","plainToInstance","then","errors","length","message","map","error","Object","values","constraints","join","BadRequestException"],"mappings":"AAAA;;;;+BAMaA;;aAAAA;;kCANmB;gCACU;4BAGN;AAE7B,MAAMA,uBAAuB,CAClCC,MACAC,QAA8C,MAAM,EACpDC,wBAAwB,KAAK,EAC7BC,YAAY,IAAI,EAChBC,uBAAuB,IAAI,GACR,CAACC,KAAcC,GAAGC,OAAuB;QAC5DC,IAAAA,wBAAQ,EAACC,IAAAA,iCAAe,EAACT,MAAMK,GAAG,CAACJ,MAAM,GAAG;YAAEC;YAAuBC;YAAWC;QAAqB,GAAGM,IAAI,CAAC,CAACC,SAA8B;YAC1I,IAAIA,OAAOC,MAAM,GAAG,GAAG;gBACrB,MAAMC,UAAUF,OAAOG,GAAG,CAAC,CAACC,QAA2BC,OAAOC,MAAM,CAACF,MAAMG,WAAW,GAAGC,IAAI,CAAC;gBAC9FZ,KAAK,IAAIa,+BAAmB,CAACP;YAC/B,OAAO;gBACLN;YACF,CAAC;QACH;IACF"}