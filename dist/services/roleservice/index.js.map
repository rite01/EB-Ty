{"version":3,"sources":["../../../src/services/roleservice/index.ts"],"sourcesContent":["import { IRole } from '../../interfaces';\nimport db from '../../databases/models';\nimport { BadRequestException, ConflictException } from '../../exceptions';\nimport { isEmpty } from '../../utils/utils';\n\nconst { roles } = db.models;\n\nexport class RoleService {\n  public async findAllRoles(): Promise<IRole> {\n    const role: any = await roles.findAll();\n    return role;\n  }\n\n  public async createRole(userData: any): Promise<IRole> {\n    if (isEmpty(userData)) throw new BadRequestException('userData is empty');\n\n    const findRole: any = await roles.findOne({ where: { name: userData.name } });\n    if (findRole) throw new ConflictException(`This role ${userData.name} already exists`);\n\n    const createRoleData: any = await roles.create({ ...userData });\n\n    return createRoleData;\n  }\n\n  public async deleteRole(roleId: string): Promise<IRole> {\n    const deleteRoleById: any = await roles.destroy({ where: { id: roleId } });\n    if (!deleteRoleById) throw new ConflictException(\"User doesn't exist\");\n\n    return deleteRoleById;\n  }\n\n  public async updateRole(\n    roleId: string,\n    roleData: IRole,\n  ): Promise<[affectedCount: number, affectedRows: any[]]> {\n    const { id } = roleData;\n    if (isEmpty(roleData)) throw new BadRequestException('Role is empty');\n\n    if (id) {\n      const result = await roles.findOne({\n        where: {\n          id,\n        },\n      });\n      if (result) throw new ConflictException('This Role already exists');\n    }\n    const updateRoleById: [\n      affectedCount: number,\n      affectedRows: any[],\n    ] = await roles.update(\n      {\n        ...roleData,\n      },\n      { where: { id: roleId }, returning: true },\n    );\n    if (!updateRoleById) throw new ConflictException(\"Role doesn't exist\");\n\n    return updateRoleById;\n  }\n\n  public async findRoleById(roleId: any): Promise<IRole> {\n    if (isEmpty(roleId)) throw new BadRequestException('UserId is empty');\n\n    const findRole: any = await roles.findOne({\n      where: { id: roleId },\n      include: {\n        model: roles,\n      },\n    });\n    if (!findRole) throw new ConflictException(\"User doesn't exist\");\n\n    return findRole;\n  }\n}\n"],"names":["RoleService","roles","db","models","findAllRoles","role","findAll","createRole","userData","isEmpty","BadRequestException","findRole","findOne","where","name","ConflictException","createRoleData","create","deleteRole","roleId","deleteRoleById","destroy","id","updateRole","roleData","result","updateRoleById","update","returning","findRoleById","include","model"],"mappings":"AAAA;;;;+BAOaA;;aAAAA;;+CANE;4BACwC;uBAC/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,MAAM,EAAEC,MAAK,EAAE,GAAGC,eAAE,CAACC,MAAM;AAEpB,IAAA,AAAMH,cAAN,MAAMA;IACEI;eAAb,kBAAA,YAA4C;YAC1C,MAAMC,OAAY,MAAMJ,MAAMK,OAAO;YACrC,OAAOD;QACT;;IAEaE,WAAWC,QAAa;eAArC,kBAAA,YAAuD;YACrD,IAAIC,IAAAA,cAAO,EAACD,WAAW,MAAM,IAAIE,+BAAmB,CAAC,qBAAqB;YAE1E,MAAMC,WAAgB,MAAMV,MAAMW,OAAO,CAAC;gBAAEC,OAAO;oBAAEC,MAAMN,SAASM,IAAI;gBAAC;YAAE;YAC3E,IAAIH,UAAU,MAAM,IAAII,6BAAiB,CAAC,CAAC,UAAU,EAAEP,SAASM,IAAI,CAAC,eAAe,CAAC,EAAE;YAEvF,MAAME,iBAAsB,MAAMf,MAAMgB,MAAM,CAAC,kBAAKT;YAEpD,OAAOQ;QACT;;IAEaE,WAAWC,MAAc;eAAtC,kBAAA,YAAwD;YACtD,MAAMC,iBAAsB,MAAMnB,MAAMoB,OAAO,CAAC;gBAAER,OAAO;oBAAES,IAAIH;gBAAO;YAAE;YACxE,IAAI,CAACC,gBAAgB,MAAM,IAAIL,6BAAiB,CAAC,sBAAsB;YAEvE,OAAOK;QACT;;IAEaG,WACXJ,MAAc,EACdK,QAAe;eAFjB,kBAAA,YAGyD;YACvD,MAAM,EAAEF,GAAE,EAAE,GAAGE;YACf,IAAIf,IAAAA,cAAO,EAACe,WAAW,MAAM,IAAId,+BAAmB,CAAC,iBAAiB;YAEtE,IAAIY,IAAI;gBACN,MAAMG,SAAS,MAAMxB,MAAMW,OAAO,CAAC;oBACjCC,OAAO;wBACLS;oBACF;gBACF;gBACA,IAAIG,QAAQ,MAAM,IAAIV,6BAAiB,CAAC,4BAA4B;YACtE,CAAC;YACD,MAAMW,iBAGF,MAAMzB,MAAM0B,MAAM,CACpB,kBACKH,WAEL;gBAAEX,OAAO;oBAAES,IAAIH;gBAAO;gBAAGS,WAAW,IAAI;YAAC;YAE3C,IAAI,CAACF,gBAAgB,MAAM,IAAIX,6BAAiB,CAAC,sBAAsB;YAEvE,OAAOW;QACT;;IAEaG,aAAaV,MAAW;eAArC,kBAAA,YAAuD;YACrD,IAAIV,IAAAA,cAAO,EAACU,SAAS,MAAM,IAAIT,+BAAmB,CAAC,mBAAmB;YAEtE,MAAMC,WAAgB,MAAMV,MAAMW,OAAO,CAAC;gBACxCC,OAAO;oBAAES,IAAIH;gBAAO;gBACpBW,SAAS;oBACPC,OAAO9B;gBACT;YACF;YACA,IAAI,CAACU,UAAU,MAAM,IAAII,6BAAiB,CAAC,sBAAsB;YAEjE,OAAOJ;QACT;;AACF"}