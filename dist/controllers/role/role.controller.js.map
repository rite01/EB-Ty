{"version":3,"sources":["../../../src/controllers/role/role.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { IRole } from '../../interfaces';\nimport { RoleService } from '../../services/roleservice';\n\nexport class RoleController {\n  public roleData = new RoleService();\n\n  /**\n   * @swagger\n   *\n   * /role/create:\n   *   post:\n   *     tags:\n   *      - Role\n   *     description: Create Role\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - name\n   *      properties:\n   *        name:\n   *          type: string\n   *          description: Role name\n   */\n  public createRole = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const roleData = req.body;\n      const createUserRoleData: IRole = await this.roleData.createRole({ ...roleData });\n\n      return res.status(201).json({ data: createUserRoleData, status: 200, message: 'role created' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /role/getAll:\n   *   get:\n   *     tags:\n   *      - Role\n   *     description: Get Roles\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getRoles = async (_: Request, res: Response, next: NextFunction) => {\n    try {\n      const findAllRolesData: any = await this.roleData.findAllRoles();\n\n      return res.status(200).json({ data: findAllRolesData, status: 200, message: 'get all roles' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /role/delete/:id:\n   *   delete:\n   *     tags:\n   *      - Role\n   *     description: Role Delete\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n  public deleteRole = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const data = await this.roleData.deleteRole(id);\n\n      return res.status(200).json({ data, status: 200, message: 'role deleted successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /get/:id:\n   *   get:\n   *     tags:\n   *      - Role\n   *     description: Get role by id\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n\n  public getRoleById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const roleId: any = req.params.id;\n      const findOneRoleData: IRole = await this.roleData.findRoleById(roleId);\n\n      return res.status(200).json({ data: findOneRoleData, status: 200, message: 'findOne' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /role/update/:id:\n   *   patch:\n   *     tags:\n   *      - Role\n   *     description: Update Role\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         description: user data.\n   *         in: body\n   *         required: true\n   *         schema:\n   *           $ref: '#/definitions/Create'\n   *     responses:\n   *       200:\n   *         description: success\n   * definitions:\n   *    Create:\n   *      required:\n   *          - name\n   *      properties:\n   *        name:\n   *          type: string\n   *          description: role name\n   */\n\n  public updateRole = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const { id } = req.params;\n      const role: any = req.body;\n      const data = await this.roleData.updateRole(id, role);\n\n      return res.status(200).json({ data, status: 200, message: 'Role updated successfully' });\n    } catch (error) {\n      return next(error);\n    }\n  };\n}\n"],"names":["RoleController","roleData","RoleService","createRole","req","res","next","body","createUserRoleData","status","json","data","message","error","getRoles","_","findAllRolesData","findAllRoles","deleteRole","id","params","getRoleById","roleId","findOneRoleData","findRoleById","updateRole","role"],"mappings":"AAAA;;;;+BAIaA;;aAAAA;;6BAFe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAErB,IAAA,AAAMA,iBAAN,MAAMA;;aACJC,WAAW,IAAIC,wBAAW;;aA+B1BC;uBAAa,kBAAA,UAAOC,KAAcC,KAAeC,MAAuB;gBAC7E,IAAI;oBACF,MAAML,WAAWG,IAAIG,IAAI;oBACzB,MAAMC,qBAA4B,MAAM,MAAKP,QAAQ,CAACE,UAAU,CAAC,kBAAKF;oBAEtE,OAAOI,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMH;wBAAoBC,QAAQ;wBAAKG,SAAS;oBAAe;gBAC/F,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAT2BT,KAAcC,KAAeC;;;;;aA0BjDQ;uBAAW,kBAAA,UAAOC,GAAYV,KAAeC,MAAuB;gBACzE,IAAI;oBACF,MAAMU,mBAAwB,MAAM,OAAKf,QAAQ,CAACgB,YAAY;oBAE9D,OAAOZ,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMK;wBAAkBP,QAAQ;wBAAKG,SAAS;oBAAgB;gBAC9F,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BARyBE,GAAYV,KAAeC;;;;;aAwB7CY;uBAAa,kBAAA,UAAOd,KAAcC,KAAeC,MAAuB;gBAC7E,IAAI;oBACF,MAAM,EAAEa,GAAE,EAAE,GAAGf,IAAIgB,MAAM;oBACzB,MAAMT,OAAO,MAAM,OAAKV,QAAQ,CAACiB,UAAU,CAACC;oBAE5C,OAAOd,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC;wBAAMF,QAAQ;wBAAKG,SAAS;oBAA4B;gBACxF,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAT2BT,KAAcC,KAAeC;;;;;aA0BjDe;uBAAc,kBAAA,UAAOjB,KAAcC,KAAeC,MAAuB;gBAC9E,IAAI;oBACF,MAAMgB,SAAclB,IAAIgB,MAAM,CAACD,EAAE;oBACjC,MAAMI,kBAAyB,MAAM,OAAKtB,QAAQ,CAACuB,YAAY,CAACF;oBAEhE,OAAOjB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,MAAMY;wBAAiBd,QAAQ;wBAAKG,SAAS;oBAAU;gBACvF,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAT4BT,KAAcC,KAAeC;;;;;aAyClDmB;uBAAa,kBAAA,UAAOrB,KAAcC,KAAeC,MAAuB;gBAC7E,IAAI;oBACF,MAAM,EAAEa,GAAE,EAAE,GAAGf,IAAIgB,MAAM;oBACzB,MAAMM,OAAYtB,IAAIG,IAAI;oBAC1B,MAAMI,OAAO,MAAM,OAAKV,QAAQ,CAACwB,UAAU,CAACN,IAAIO;oBAEhD,OAAOrB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC;wBAAMF,QAAQ;wBAAKG,SAAS;oBAA4B;gBACxF,EAAE,OAAOC,OAAO;oBACd,OAAOP,KAAKO;gBACd;YACF;4BAV2BT,KAAcC,KAAeC;;;;;AAW1D"}