{"version":3,"sources":["../../src/utils/utils.ts"],"sourcesContent":["/**\n * @method isEmpty\n * @param {String | Number | Object} value\n * @returns {Boolean} true & false\n * @description this value is Empty Check\n */\nexport const isEmpty = (value: string | number | object | undefined): boolean => {\n  if (value === null) {\n    return true;\n  } if (typeof value !== 'number' && value === '') {\n    return true;\n  } if (typeof value === 'undefined' || value === undefined) {\n    return true;\n  } if (value !== null && typeof value === 'object' && !Object.keys(value)?.length) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * @method getOsEnv\n * @param {String} value\n * @returns {String} true & false\n * @description this value is getOsEnv Check\n */\nexport const getOsEnv = (key: string): any => {\n  const { env } = process;\n  if (isEmpty(env[key])) {\n    throw new Error(`[ENV] ${key} is not set.`);\n  }\n  return env[key];\n};\n\n/**\n * @method toNumber\n * @param {String} value\n * @returns {Number} true & false\n * @description this value is toNumber Check\n */\nexport const toNumber = (val: string): number => Number.parseInt(val, 10);\n\n/**\n * @method normalizePort\n * @param {String | Number} value\n * @returns {Number | Boolean} true & false\n * @description this value is normalizePort Check\n */\nexport const normalizePort = (port: any): number | boolean => {\n  const parsedPort = toNumber(port);\n  if (Number.isNaN(parsedPort)) {\n    return port;\n  }\n  if (parsedPort >= 0) {\n    return parsedPort;\n  }\n  return false;\n};\n\n/**\n * @method isObject\n * @param {String} value\n * @returns {Boolean} true & false\n * @description this value is isObject Check\n */\nexport const isObject = (fn: string): boolean => !isEmpty(fn) && typeof fn === 'object';\n\n/**\n  * @method isFunction\n  * @param {String} value\n  * @returns {Boolean} true & false\n  * @description this value is isFunction Check\n  */\nexport const isFunction = (val: string): boolean => typeof val === 'function';\n\n/**\n  * @method isString\n  * @param {String} value\n  * @returns {Boolean} true & false\n  * @description this value is isString Check\n  */\nexport const isString = (val: string): boolean => typeof val === 'string';\n\n/**\n  * @method isNumber\n  * @param {String} value\n  * @returns {Boolean} true & false\n  * @description this value is isNumber Check\n  */\nexport const isNumber = (val: string): boolean => typeof val === 'number';\n"],"names":["isEmpty","getOsEnv","toNumber","normalizePort","isObject","isFunction","isString","isNumber","value","Object","undefined","keys","length","key","env","process","Error","val","Number","parseInt","port","parsedPort","isNaN","fn"],"mappings":"AAMA;;;;;;;;;;;IAAaA,OAAO,MAAPA;IAmBAC,QAAQ,MAARA;IAcAC,QAAQ,MAARA;IAQAC,aAAa,MAAbA;IAiBAC,QAAQ,MAARA;IAQAC,UAAU,MAAVA;IAQAC,QAAQ,MAARA;IAQAC,QAAQ,MAARA;;AAlFN,MAAMP,UAAU,CAACQ,QAAyD;QAOzBC;IANtD,IAAID,UAAU,IAAI,EAAE;QAClB,OAAO,IAAI;IACb,CAAC;IAAC,IAAI,OAAOA,UAAU,YAAYA,UAAU,IAAI;QAC/C,OAAO,IAAI;IACb,CAAC;IAAC,IAAI,OAAOA,UAAU,eAAeA,UAAUE,WAAW;QACzD,OAAO,IAAI;IACb,CAAC;IAAC,IAAIF,UAAU,IAAI,IAAI,OAAOA,UAAU,YAAY,CAACC,CAAAA,CAAAA,eAAAA,OAAOE,IAAI,CAACH,oBAAZC,0BAAAA,KAAAA,IAAAA,aAAoBG,MAAM,AAAD,GAAG;QAChF,OAAO,IAAI;IACb,CAAC;IACD,OAAO,KAAK;AACd;AAQO,MAAMX,WAAW,CAACY,MAAqB;IAC5C,MAAM,EAAEC,IAAG,EAAE,GAAGC;IAChB,IAAIf,QAAQc,GAAG,CAACD,IAAI,GAAG;QACrB,MAAM,IAAIG,MAAM,CAAC,MAAM,EAAEH,IAAI,YAAY,CAAC,EAAE;IAC9C,CAAC;IACD,OAAOC,GAAG,CAACD,IAAI;AACjB;AAQO,MAAMX,WAAW,CAACe,MAAwBC,OAAOC,QAAQ,CAACF,KAAK;AAQ/D,MAAMd,gBAAgB,CAACiB,OAAgC;IAC5D,MAAMC,aAAanB,SAASkB;IAC5B,IAAIF,OAAOI,KAAK,CAACD,aAAa;QAC5B,OAAOD;IACT,CAAC;IACD,IAAIC,cAAc,GAAG;QACnB,OAAOA;IACT,CAAC;IACD,OAAO,KAAK;AACd;AAQO,MAAMjB,WAAW,CAACmB,KAAwB,CAACvB,QAAQuB,OAAO,OAAOA,OAAO;AAQxE,MAAMlB,aAAa,CAACY,MAAyB,OAAOA,QAAQ;AAQ5D,MAAMX,WAAW,CAACW,MAAyB,OAAOA,QAAQ;AAQ1D,MAAMV,WAAW,CAACU,MAAyB,OAAOA,QAAQ"}