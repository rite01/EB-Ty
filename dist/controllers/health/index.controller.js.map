{"version":3,"sources":["../../../src/controllers/health/index.controller.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\nimport { NextFunction, Request, Response } from 'express';\nimport { LoggerService } from '../../libs';\nimport { ErrorMessage, HttpMessage, HttpStatus } from '../../constants';\n\nclass IndexController {\n  private loggerService = new LoggerService();\n\n  /**\n   * @swagger\n   *\n   * /:\n   *   get:\n   *     tags:\n   *      - Health\n   *     description: Check server status\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n  public index = (_: Request, res: Response, next: NextFunction) => {\n    try {\n      return res.status(HttpStatus.OK).json({\n        status: HttpStatus.OK,\n        message: HttpMessage.OK,\n      });\n    } catch (error) {\n      return next(error);\n    }\n  };\n\n  /**\n   * @swagger\n   *\n   * /health:\n   *   get:\n   *     tags:\n   *      - Health\n   *     description: Check server status\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: success\n   */\n  public health = (req: Request, res: Response, next: NextFunction) => {\n    try {\n      this.loggerService.info(`${ErrorMessage.SERVER_HEALTH} - ${req.originalUrl}`, {\n        controller: IndexController.name,\n        function: 'health',\n        method: req.method,\n        status: HttpStatus.OK,\n      });\n      return res.status(HttpStatus.OK).json({\n        status: HttpStatus.OK,\n        message: ErrorMessage.SERVER_HEALTH,\n      });\n    } catch (error) {\n      return next(error);\n    }\n  };\n}\n\nexport default IndexController;\n"],"names":["IndexController","loggerService","LoggerService","index","_","res","next","status","HttpStatus","OK","json","message","HttpMessage","error","health","req","info","ErrorMessage","SERVER_HEALTH","originalUrl","controller","name","function","method"],"mappings":"AACA;;;;+BAgEA;;aAAA;;sBA/D8B;2BACwB;AAEtD,IAAA,AAAMA,kBAAN,MAAMA;;aACIC,gBAAgB,IAAIC,mBAAa;aAgBlCC,QAAQ,CAACC,GAAYC,KAAeC,OAAuB;YAChE,IAAI;gBACF,OAAOD,IAAIE,MAAM,CAACC,qBAAU,CAACC,EAAE,EAAEC,IAAI,CAAC;oBACpCH,QAAQC,qBAAU,CAACC,EAAE;oBACrBE,SAASC,sBAAW,CAACH,EAAE;gBACzB;YACF,EAAE,OAAOI,OAAO;gBACd,OAAOP,KAAKO;YACd;QACF;aAgBOC,SAAS,CAACC,KAAcV,KAAeC,OAAuB;YACnE,IAAI;gBACF,IAAI,CAACL,aAAa,CAACe,IAAI,CAAC,CAAC,EAAEC,uBAAY,CAACC,aAAa,CAAC,GAAG,EAAEH,IAAII,WAAW,CAAC,CAAC,EAAE;oBAC5EC,YAAYpB,gBAAgBqB,IAAI;oBAChCC,UAAU;oBACVC,QAAQR,IAAIQ,MAAM;oBAClBhB,QAAQC,qBAAU,CAACC,EAAE;gBACvB;gBACA,OAAOJ,IAAIE,MAAM,CAACC,qBAAU,CAACC,EAAE,EAAEC,IAAI,CAAC;oBACpCH,QAAQC,qBAAU,CAACC,EAAE;oBACrBE,SAASM,uBAAY,CAACC,aAAa;gBACrC;YACF,EAAE,OAAOL,OAAO;gBACd,OAAOP,KAAKO;YACd;QACF;;AACF;MAEA,WAAeb"}