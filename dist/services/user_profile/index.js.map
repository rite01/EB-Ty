{"version":3,"sources":["../../../src/services/user_profile/index.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport { BadRequestException, ConflictException } from '../../exceptions';\nimport { IUserProfile } from '../../interfaces';\nimport { isEmpty } from '../../utils/utils';\nimport db from '../../databases/models';\n\nconst {\n  users, userProfile, branches, department, designation,\n} = db.models;\nexport class UserProfileService {\n  public async createUserProfile(data: any): Promise<IUserProfile> {\n    if (isEmpty(data)) throw new BadRequestException('data is empty');\n\n    const result: any = await userProfile.findOne({\n      where: { userId: data.userId },\n    });\n    if (result) throw new ConflictException('This user profile already exists');\n\n    const createdUserProfile: any = await userProfile.create({\n      ...data,\n    });\n\n    return createdUserProfile;\n  }\n\n  public async findAllUserProfiles() {\n    const foundProfiles = await userProfile.findAll({\n      include: [{\n        model: users,\n        as: 'userDetails',\n      }, {\n        model: branches,\n        as: 'branchDetails',\n      },\n      {\n        model: department,\n        as: 'departmentDetails',\n      },\n      {\n        model: designation,\n        as: 'designationDetails',\n      },\n      ],\n    });\n    // const user: any = await users.findAll({\n    //   include: [{\n    //     model: roles,\n    //     as: 'role',\n    //   }],\n    // });\n    // const userProfiles: any = await userProfile.findAll();\n    return foundProfiles;\n  }\n\n  public async findProfilesById(\n    profileId: string,\n  ): Promise<IUserProfile> {\n    if (isEmpty(profileId)) throw new BadRequestException('profile ID is empty');\n\n    const result: any = await userProfile.findOne({\n      where: { id: profileId },\n      include: [{\n        model: users,\n        as: 'userDetails',\n      }, {\n        model: branches,\n        as: 'branchDetails',\n      },\n      {\n        model: department,\n        as: 'departmentDetails',\n      },\n      {\n        model: designation,\n        as: 'designationDetails',\n      },\n      ],\n    });\n    if (!result) throw new ConflictException(\"profile doesn't exist\");\n\n    return result;\n  }\n\n  public async updateUserProfile(\n    profileId: string,\n    profileData: IUserProfile,\n  ): Promise<[affectedCount: number, affectedRows: any[]]> {\n    const { userId } = profileData;\n    if (isEmpty(profileData)) throw new BadRequestException('profileData is empty');\n\n    if (userId) {\n      const result = await userProfile.findOne({\n        where: {\n          userId,\n        },\n      });\n      if (result) throw new ConflictException('This designation already exists');\n    }\n    const updateProfileById: [\n      affectedCount: number,\n      affectedRows: any[],\n    ] = await userProfile.update(\n      {\n        ...profileData,\n      },\n      { where: { id: profileId }, returning: true },\n    );\n    if (!updateProfileById) throw new ConflictException(\"Profile doesn't exist\");\n\n    return updateProfileById;\n  }\n\n  public async deleteUserProfile(profileId: string): Promise<number> {\n    const result = await userProfile.destroy({\n      where: { id: profileId },\n    });\n    if (!result) throw new ConflictException(\"Profile doesn't exist\");\n    return result;\n  }\n}\n"],"names":["UserProfileService","users","userProfile","branches","department","designation","db","models","createUserProfile","data","isEmpty","BadRequestException","result","findOne","where","userId","ConflictException","createdUserProfile","create","findAllUserProfiles","foundProfiles","findAll","include","model","as","findProfilesById","profileId","id","updateUserProfile","profileData","updateProfileById","update","returning","deleteUserProfile","destroy"],"mappings":"AACA;;;;+BAQaA;;aAAAA;;4BAR0C;uBAE/B;+CACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEf,MAAM,EACJC,MAAK,EAAEC,YAAW,EAAEC,SAAQ,EAAEC,WAAU,EAAEC,YAAW,EACtD,GAAGC,eAAE,CAACC,MAAM;AACN,IAAA,AAAMP,qBAAN,MAAMA;IACEQ,kBAAkBC,IAAS;eAAxC,kBAAA,YAAiE;YAC/D,IAAIC,IAAAA,cAAO,EAACD,OAAO,MAAM,IAAIE,+BAAmB,CAAC,iBAAiB;YAElE,MAAMC,SAAc,MAAMV,YAAYW,OAAO,CAAC;gBAC5CC,OAAO;oBAAEC,QAAQN,KAAKM,MAAM;gBAAC;YAC/B;YACA,IAAIH,QAAQ,MAAM,IAAII,6BAAiB,CAAC,oCAAoC;YAE5E,MAAMC,qBAA0B,MAAMf,YAAYgB,MAAM,CAAC,kBACpDT;YAGL,OAAOQ;QACT;;IAEaE;eAAb,kBAAA,YAAmC;YACjC,MAAMC,gBAAgB,MAAMlB,YAAYmB,OAAO,CAAC;gBAC9CC,SAAS;oBAAC;wBACRC,OAAOtB;wBACPuB,IAAI;oBACN;oBAAG;wBACDD,OAAOpB;wBACPqB,IAAI;oBACN;oBACA;wBACED,OAAOnB;wBACPoB,IAAI;oBACN;oBACA;wBACED,OAAOlB;wBACPmB,IAAI;oBACN;iBACC;YACH;YAQA,OAAOJ;QACT;;IAEaK,iBACXC,SAAiB;eADnB,kBAAA,YAEyB;YACvB,IAAIhB,IAAAA,cAAO,EAACgB,YAAY,MAAM,IAAIf,+BAAmB,CAAC,uBAAuB;YAE7E,MAAMC,SAAc,MAAMV,YAAYW,OAAO,CAAC;gBAC5CC,OAAO;oBAAEa,IAAID;gBAAU;gBACvBJ,SAAS;oBAAC;wBACRC,OAAOtB;wBACPuB,IAAI;oBACN;oBAAG;wBACDD,OAAOpB;wBACPqB,IAAI;oBACN;oBACA;wBACED,OAAOnB;wBACPoB,IAAI;oBACN;oBACA;wBACED,OAAOlB;wBACPmB,IAAI;oBACN;iBACC;YACH;YACA,IAAI,CAACZ,QAAQ,MAAM,IAAII,6BAAiB,CAAC,yBAAyB;YAElE,OAAOJ;QACT;;IAEagB,kBACXF,SAAiB,EACjBG,WAAyB;eAF3B,kBAAA,YAGyD;YACvD,MAAM,EAAEd,OAAM,EAAE,GAAGc;YACnB,IAAInB,IAAAA,cAAO,EAACmB,cAAc,MAAM,IAAIlB,+BAAmB,CAAC,wBAAwB;YAEhF,IAAII,QAAQ;gBACV,MAAMH,SAAS,MAAMV,YAAYW,OAAO,CAAC;oBACvCC,OAAO;wBACLC;oBACF;gBACF;gBACA,IAAIH,QAAQ,MAAM,IAAII,6BAAiB,CAAC,mCAAmC;YAC7E,CAAC;YACD,MAAMc,oBAGF,MAAM5B,YAAY6B,MAAM,CAC1B,kBACKF,cAEL;gBAAEf,OAAO;oBAAEa,IAAID;gBAAU;gBAAGM,WAAW,IAAI;YAAC;YAE9C,IAAI,CAACF,mBAAmB,MAAM,IAAId,6BAAiB,CAAC,yBAAyB;YAE7E,OAAOc;QACT;;IAEaG,kBAAkBP,SAAiB;eAAhD,kBAAA,YAAmE;YACjE,MAAMd,SAAS,MAAMV,YAAYgC,OAAO,CAAC;gBACvCpB,OAAO;oBAAEa,IAAID;gBAAU;YACzB;YACA,IAAI,CAACd,QAAQ,MAAM,IAAII,6BAAiB,CAAC,yBAAyB;YAClE,OAAOJ;QACT;;AACF"}